#!/usr/bin/env python3
"""
orchestrator.py: Integra provisionamento de ambiente (via script Bash) com execu√ß√£o de ataques e coleta de m√©tricas.
"""
import subprocess
import os
import time
import json
import click

from attack_runner import run_all_attacks
import metrics

PROVISION_SCRIPT = os.path.join(os.path.dirname(__file__), 'provision_env.sh')

def run_provision(no_cli=False):
    """Executa provision_env.sh linha a linha, para mostrar logs e capturar o prompt de relogin."""
    cmd = [PROVISION_SCRIPT]
    if no_cli:
    	cmd.append('--no-cli')
    
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    for line in proc.stdout:
        click.echo(line.rstrip())              # mostre tudo
        if "Fa√ßa LOGIN novamente" in line:
            proc.kill()                        # interrompe o script
            return 1                           # sinaliza relogin necess√°rio
    return proc.wait()


@click.command()
@click.option('--skip-provision', is_flag=True, default=False,
              help='Pular provisionamento e assumir ambiente j√° levantado.')
@click.option('--report', default='report.json',
              help='Arquivo de sa√≠da JSON com resultados e m√©tricas.')
def main(skip_provision, report):
    # 1) Provisionamento
    if not skip_provision:
        if not os.path.exists(PROVISION_SCRIPT):
            click.echo(click.style(f"‚ùå Script de provisionamento n√£o encontrado: {PROVISION_SCRIPT}", fg='red'))
            return
        click.echo("üîß Executando provisionamento do ambiente...")
        subprocess.run(['chmod', '+x', PROVISION_SCRIPT], check=True)
        # Executar e capturar sa√≠da
        code = run_provision(no_cli=True)
        if code == 1:  # relogin
            click.secho(
                "\n‚ö†Ô∏è  Docker foi instalado, mas voc√™ precisa relogar no sistema "
                "para aplicar as permiss√µes. Depois disso, execute again:\n\n"
                "  python3 orchestrator.py --skip-provision\n",
                fg='yellow'
            )
            return
        elif code != 0:
            click.secho(f"\n‚ùå Provisionamento falhou com c√≥digo {code}.", fg='red')
            return
        click.echo("‚úÖ Ambiente provisionado. Aguardando estabiliza√ß√£o (10s)...")
        time.sleep(10)

    # 2) M√©tricas antes dos ataques
    click.echo("üìä Coletando m√©tricas iniciais...")
    m_before = metrics.snapshot_container_stats('onos-controller')
    click.echo(f"   CPU_before={m_before['CPU']}%, Mem_before={m_before['MemUsage']}")

    # 3) Executar todos os ataques
    click.echo("üöÄ Executando su√≠te de ataques...")
    results = run_all_attacks()
    click.echo(f"‚úÖ Ataques conclu√≠dos: {len(results)} m√≥dulos executados.")

    # 4) M√©tricas ap√≥s ataques
    click.echo("üìä Coletando m√©tricas finais...")
    m_after = metrics.snapshot_container_stats('onos-controller')
    click.echo(f"   CPU_after={m_after['CPU']}%, Mem_after={m_after['MemUsage']}")

    # 5) Lat√™ncia de rede (ping)
    target_ip = metrics.get_target_ip()
    click.echo(f"üåê Medindo lat√™ncia para {target_ip}...")
    latency = metrics.measure_latency(target_ip)
    click.echo(f"   Lat√™ncia m√©dia: {latency} ms")

    # 6) Gerar relat√≥rio JSON
    report_data = {
        'metrics_before': m_before,
        'attack_results': results,
        'metrics_after': m_after,
        'latency_ms': latency
    }
    with open(report, 'w') as f:
        json.dump(report_data, f, indent=2)
    click.echo(click.style(f"üìÅ Relat√≥rio gerado: {report}", fg='green'))

if __name__ == '__main__':
    main()
